# python -m unittest simulator.tests.test_transcript
import unittest
from MenDelSIM.src.transcript import Transcript
from Bio.Seq import Seq
from GUD.ORM import Gene
from GUD.ORM.genomic_feature import GenomicFeature
from . import establish_GUD_session

class TranscriptCreationTests(unittest.TestCase): 
    # @unittest.skip
    def test_normal_gene(self):
        transcript = Transcript(5)
        print(transcript)
    # @unittest.skip
    def test_assert_raises(self):
        with self.assertRaises(Exception) as cm:
            Transcript(9000000)
        err = cm.exception
        self.assertEqual(str(err), 'cannot make transcript')

class TrascriptMethodTests(unittest.TestCase):
    # @unittest.skip
    def test_get_seq(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        transcript = Transcript(XKR8_uid) 
        seq = transcript.get_seq()
        self.assertEqual(seq, "ATTCCCTTCCGTATGGAAATGAGGTTAACTCATTTGCAGGAACCTAACGCCCGCCCTCCCCCGACTCGGATCGCTGGCGTGAACCCAGCGGCCCCGTGCTCTCCGGGTATCCCTGGATCGAGGCGCACGCGTTGTTGCAAAGTCTCGCACTTAGGGATTAGAATGTGCCTTTGCGTTTCGTTTTGTTTTGCAACAATACAGGTGTGAGGGATCGCAGCCCTGGTCCAGGCTCTAGTCTCCCCGCCCTCTCGCTTTCTTGGGCCTCCGGGCGCCTCAAAGGTAAAACTAGGCCATTTGAAGCCTGCGAAGCGAAGGGCAGTCGGTCTTCAGGCCTAGCGGGCTTGGCTGGGCTGGGTCGGTGGACCCCTGGGCTGGCGGCGGGAGCAGAGCATCGAGCGGCTTTTAGCTGGGGTTCGGGCGGAGGACCTGGGACAACCGCGGGCCTCGCTCCTCCCCGGACGGGGCGGGACGGGGAAGTCCCGCCCACCAGGCCCAGGCCCCGGGCCGCCCCGAGGGCTGCGCCCACCTCCTTCCTGCCTCGGCAACCCCGGGCCCTGAGGGCAGGCCCCAACCGCGGAGGAGCAGGAGAGGGCGGAGGCCGGCGGGCCATGCCCTGGTCGTCCCGCGGCGCCCTCCTTCGGGACCTGGTCCTGGGCGTGCTGGGCACCGCCGCCTTCCTGCTCGACCTGGGCACCGACCTGTGGGCCGCCGTCCAGTATGCGCTCGGCGGCCGCTACCTGTGGGCGGCGCTGGTGCTGGCGCTGCTGGGCCTGGCCTCCGTGGCGCTGCAGCTCTTCAGCTGGCTCTGGCTGCGCGCTGACCCTGCCGGCCTGCACGGGTCGCAGCCCCCGCGCCGCTGCCTGGCGCTGCTGCATCTCCTGCAGCTGGGTTACCTGTACAGGTGAGTGCTTCGCCCCGGGAGGGGAGGAGTGTCGGAGCCCAGCACCTCCGTCAGCTGGGTCACCTGTACAGGTGACACGCCATATGCCGGGAAGGGGACTGGGAGAGGGAACCAAGTCCTGTGGGCGCCTGGCCTACAGGTGAGCGTGCAGCCCTTTACGGAAAGGGAATCCCGGTAGACTGCCTTCATTCTAGCCCTAGCTTTCCTGGCACAGGCGAAGAAACTGAGGCCCAGGGAAGAAAGGGAGGCGCATGGGCTTTGAAGTCGGACCTCTCAGGGATCCACTTCTGGCTTTGCCCCCTCTCGCCTCACTTCTGCATTTCTCTGAGCCTCAGTTTCCTCCTGCGTAGAAAGGAGGTAGTCACCCTGAGACAGGTGTGACGGGCAGGCCTGTTGTGAAGAGTGAGCGAAAGAATGAGAAAGTGCCTCGCACAGTGCCTGGCCTGTAATGGCAGGGGCTGCGGACTCAGTTCAGCATCCCATGTTTCAGCATGGGCAGGGCCTTGGGAAGTCACTGACCTCTCAGTGGGGCTGTTTGGTTGCTGTTCCCATTGGGATGGGGATAGCGCCTGCCCGTTTGGTGAAGATGCAGTGAAATGACATCTGTCCACTGCCCTGGCTCAGAGTGAGCACTCAGCAACCTCAGCTGGCTTCTTGACCTGGGCCTCCCTGGGAGTTTCAGCAGCCCTGACCCCACCACAGCGCTTGCCCCTCACAAAGGCCGCCTCTCACCCTGTCTGCCTGGTTGTATTCTTCCCCCTGAAACTTGGCTTCCCACCCCAGACCCAGCAAGAGGGCAGAGATGGCCTCTGACTCATCCATGCCCATGGAGCCAGCCAGGGCTGGGCATAGGCTGGGTCCTGGAAAATGTGTGTGGATTCTGCTCCTTTTTGGACCTGGTGGAGCCTCGTAGAGATGGGAAAACAAACCCAAGGCTCAGAGGCATGCGACAAAGTCAGGGCAGAGGGTGGTGTGGGTTGGGATGGGGTGGCCAGGGCCAGGATCTGCTCTTGAATCCGTTTTTACAAACTCTTGAGATCTGGCCTTGACAAAGCCACACGGAGTCTCCAGGAGTGGAAGAGAGGAGCTTTGAATGTGGCAGTTTTGCCTGAGGGATTATAGAGACATCAGAAAACCCCGGGTGGGCATGAAGGGGTGCAGTTGTTAAGTCCTGGGCAGGCCTCCATGAGCCGTGAATCTGTAACTACCTTATGCATCTTTGTGGCCAATATTTCTGCTGAGCTTGAGTCAGACAGACTGTACTAGCTTTGGCTTTGGAAATGGGTCTCTGTTCCTGCCTGTGAATTGGCCGAGGCAGGGGTCCCTGCTAGGTCACTGGGGACCATAGGCAAAGGCTCCTGCTGAGGGAGAACCCCAGCCTGTCCTGCCTGCCTGCTCCTCAGTGTGTTCTTGTGTCCTTCCAGGGGAAGTGACAGTACATGTCTGGTGAATGAGCTTGTGATGAGTGAACGGGGTTCTCTCCCAATAGGCAACTGAGAGCAAAGTTCTGGGTGGAGGGTCCTTGGTGCATCCTCCACTTACTCTTCATGCCAGTGGGTACCCCAGACCTGTCTGTCCAAACTCTGGACTCTCTTAACTCCGCCCCAATCTCCATCCTTAACCACTCAGGGCCAGCCTCTTAAATGGGATCCCTCCTTCCAATCTAACCCTCCTCCAGCCCCTCCCCTGTGTGGCCGGGGCAAGGCAGAGTCTGATTCCATCTGGCCTGTGCCCAGAAGTGCCCAAGAGGCAAATGTCCTCTTGCCCACAGGACCCCAGGAGATCTTGGGCACACTAAAGTTTGAGAACTACTGCCTCAGGCAACTTTATAGCATGCCTTTCCAATTCAGGTTTGGATCCAAATCCTCATTCCAGTACTTATTAGCTGCTTATAATTTTTTGTTTGTTTTTTAAAAAGAGGTAGGGTCTGGTCAGGCTTGGTGGCTCATGCCTGTAATCCTAGCAGTCTGGGAGGCTGACGTGGGTGGATCACTTGAGGTCAGGAGTTTGAGACCAGCCTGCTGAACATGGCAAAAGCTCATCTCTACAAAAATTAGCCAGGTGTGGTGGCGCATGCCTGTAATCCCAGCATCCCAGCTACTCTGGAGGCCGAGGCAGGAGAATCGCTTGAACCTGGGAGGTGGAGGTTGCAGTGAGCCGAGTTTGTGCCACTGCACTCTAGCCTGGGCGACAAGCGACAGATGTAGACTCTGTCTCCAAAAAAAAAGAAAAAAAAAAAGAGAGAGAGAGGCAGGGTCTCTGTTGCCTGGGCTGGAGTGCAGTGGCACAATCAATCATGGCTCACAGTGGCCTTGAACTCCTGGGCTCAAGCTGTCCTCCTGCGTCAGCCTCCTGAGTAGCTTGGACTACAGGCTTGTACCACCACGTCCAACTAATTAAAAAAAATTCTTTGTAGAGATGGGGCTTGCTGTGTTGCCCAGGGTGGTCTCAAACTCCTGGCCTCCAGTGATCCTCTTGCCTTGGCCTGTCAAAATGTTGGGATTACAGGCGCGAGCCACTGCACCCAGACCTTATTAGCTTCTTGATCCTGTTTCCCCATCTGTAAAATGGGCTTTTGTGAGAAGTAAACAGGACAAGGTTTGTGATGAGCTTGGGACAGTGCTTAGCCAGCGGGAGTAGAAGGTGTATTGATCCCCATTTTTGCTTTTTTGTTTTTTTTGAGACGGAGTCTTGTTCTGTCGCCAGGCTGGAGTGCAGTGGCACGATCTCGGCTCACTGTAACCTCCGCCTTGCAGATTCAAGAGATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGGACTACAGGCGCGCACCACCACACCCAGCTAATTTTTTGTATTAGTAGAGACGAGGCTTCACCATGTTAGCCAGGATGGTCTCAATCTCCTGAACTCGTGATCAGCCCGCCTCAGACTCCCAAAGTGCTGGGATTACAGGCATGAGCCACCACACCCGGCCTCGATCCTCATTTTACAGATGAAACAAGTTCAGTGAGGTTAGGACATTGCCGAAGGCCCCATAGCATGGATGTGAGGAGACAGGTTGGAGCCTGTGTCCACTCATTAGATGGGTGGGAGGCTGAGGAATTCACAGGACACTAACCTGGCCCTCTGGGCATTTGTGTGTGGTGCCTAGGTGCGTGCAGGAGCTGCGGCAGGGGCTGCTGGTGTGGCAGCAGGAGGAGCCCTCTGAGTTTGACTTGGCCTACGCCGACTTCCTCGCCCTGGACATCAGCATGCTGCGGCTCTTCGAGACCTTCTTGGAGACGGCACCACAGCTCACGCTGGTGCTGGCCATCATGCTGCAGAGTGGCCGGGCTGAGTACTACCAGTGTGAGTGAAGGCCTGTGGCTGGCCCCCCTGTCGTGGCTTGGTGGGGGGTCTCTCAAATGTTGGAACTGTTTTTAGTCTTTTATAAAGGCTGCTTAGAAAACAGGAGAACAGGCTTTAGTCAGGCAGATCTGGCTTGAAACCTAAAGTCACTCTACAGCTGTTTGAGTTTGGACAAATGCCTTGACCTCTCTGAGTATGTTTGTTCTCATCTGAAATATGGGCTTAAATCCTCCTGCCTCATAAGGTTGATGAAAGGATTAAATGAGGTGATGCAAAGAAAGCCCATTTCCTGGTACATAAGTTCCTGGTACAGAGTCTCACTCTGTCATCGCCCGTAGTGGAGTACAGCAGCCTGATCATGGCTCACTGTAGCCTCCACCTCCCAGGCTCAAGTGATCCTCCTGTCTCAGCCTCCTGAGTAGCTGGGACTACAAGTGTGTATCACCATGCTGGCTAATTTTTCTTTCTTTTTTTTTTTTTTTTTTTTGTAGAGACGAGGTCCCACTTTGTTACCCAGGCTGGTCTTGAACTCCTGAGCTCAAGTAACCTCCTACCTCAGCCTCCTAAGGTGCTGGGATTACAGGTGTCGCCCACTGTGCCTGGCCCACAAGTCTTAATTGTAATTTTTATAATTTTGAAGATAATGAAGTGTGTAAGGTGCCTGATACAGCATAGGTAACTTTTTAGTTAAGAAACAATTTCATACGTTGGGAGGCCAAGGTGCACAGGTCGCTTGAGGCCAGAGTTGGAGACCATCCTGGGTAACATAGTGAGACCTCATCTCTTCAAAATTTTAAAAGAGAAACAAGAAACAATATATTGAATGCCTTCATCCAGTCAGGTTTTCATTGTGCATCTCTTCTGTGCCTGTTACTGTGCTGGGGACACAGCAGTGAACAAGATGAACCCAGCCCCTGCCCTGCCAGGATGATAGACTAAAACAAGTAGCTACGGTTGAGTGACTGGAAAAGGGAGAGGCAGGGAGCAGAGGATCACAGGGCCCCCTAAGCATGGGTGAAGTTTACAGTGAGGAGCTTTGGGAGGGTTTTTGCATGAAAGGAAAGTGACTTGCCCATTTCCACAGACCTGGACAGTGGCCAAGCTAAAGAGGGCCCCCACTCACATCCGACTCAGGGTCCAAGCCTTCCCCTTTGCCTTCCTCCACCGCTGCCATAAATGCCACAGCCTCTCAAGAAACCAGTCCTCACTCTACCGTCACTCGCTGTGTGACCTGGAGAGCCTTCCTGTGGAAGATGGAGGTTGGACTCGATCTCCAAGGGCCCTTTCGTCTTGCTAGTCTGAGTCTATATATTGATTGAAAAAACAATAATAGCGGCTGTCACAATCGAGTGCCAGCTATTAGCCAGGCCCTGTGGGAAGCACTTACAGTCATCATTGCTCATGTTCACAGCAGCCCTGTAGGTTTGTGCTATATTGATCTTCATTTTTAAAGAGGTGCAGAAAGGTGAGTGACTTGCCCTGGGTTACTGGGCACTCACTGGGCACACGTCTTTGTCTGTTGAGGGTTGGGGGTGTCTAGAACCAGGGCCAAGTGCAGACAGTCTGCACTGTGAGTGTGGCAGGGGGTAAGGGGGCGAGACAGATTTTCCCTACTTTTTATTTAGCAAACATCTCTTTCGCTGCTGTTATGTGCCAGGTACTGGGCTGCTGGGGGATCCCAAGTGAGCAGAGTCTGTTTTCTACCCTCGAGGAGCCCAGAGATAAGGAAATAGATAATTACTGTGTGATGAGACTCCAGACAGAGGTGGGTGGCATGTTACAGGGATACCTGACACAGCTGAGTGGGTGGCATGGGGTCAGGGTGGGTGACTCCCGGGGCTCTTCAAGCTGGGGCCTGCGGGGTAATGGAGGAGTAGGCCGGGGAAGTGGGGCCTGTGCTTCTGGCGACCTAACATCCTGGGCAGAGCTTGTCAAGGTCACGGAAGGTGGCATGCTGGGCAAACTGGAAGAACATCAGCCCTGCTGAGACCTGGGCAAGGCTAATGAGCACAGATCTGTTTCCAGGCTAGGAGTGGGTTCTGGGCGCCTAATAGGTTCCCAGTAAACATCTGTCGAATGACTGCGGTGGACGGGGACAGGGGAGGAAGCAGTCGGGAGACGTGCCGGTGCCACTTCCATCCCTCCCTGGAGGCCCTTGTGCTTCTGCTCCAGGATTGGCAACCAGGAGGTGGGATAGGACCCCTGTTGTAAACTTCTGGATCTTGGAAAATCAAGGTTAGGGGTCAGTCCGATGGCCTCTGGTCTTGGAGGGGAGGGGAGGGGAGTGGGGAGACCTTCTGTCCACACAGCAGGGACATCTCTCCTGGCCCTGAGGGCAGCTTTAGCCAGAGCCTGTTGCCACCCCATGGGATTTTCTACTCCCTTTTTGAGACTAAGAAAGACGGAACTGAGACTGTTGATTTTTAGACACAAGGAAGGCTTGTGTTCTTCCCAGAAAGAAAGGGTTATGGGGCCCTGGAAGATGCCCAGGATGCAGCCAAGGCCCAGGGGTGCTGAGTGCTGGGTGGGCCACAGGTCACATCCTCTCATCTTTGACAAATACCACCCGGATAGCACCTACGCAGCAAAGCGCTGTGGTGAGGGGCAGGCTCTATATTAGGAGTCATAGCTTTGTTTTTGGTTGTGGGAACTCACTGGGTCTTCTCTAGCTGCAGATTTGCCTTCAACAAACGAGGGATTCTAATACCTACCCCAGGGTTGCTGGGAGGGCCCCCACGGTACCTGTGACCGCTGGGGAGTGCCAAGCAGGCTGGCCCCAGGACTCACTGTTCCCTCCTACTCTTTGCAGGGGTTGGCATCTGCACATCCTTCCTGGGCATCTCGTGGGCACTGCTCGACTACCACCGGGCCTTGCGCACCTGCCTCCCCTCCAAGCCGCTCCTGGGCCTGGGCTCCTCCGTGATCTACTTCCTGTGGAACCTGCTGCTGCTGTGGCCCCGAGTCCTGGCTGTGGCCCTGTTCTCAGCCCTCTTCCCCAGCTATGTGGCCCTGCACTTCCTGGGCCTGTGGCTGGTACTGCTGCTCTGGGTCTGGCTTCAGGGCACAGACTTCATGCCGGACCCCAGCTCCGAGTGGCTGTACCGGGTGACGGTGGCCACCATCCTCTATTTCTCCTGGTTCAACGTGGCTGAGGGCCGCACCCGAGGCCGGGCCATCATCCACTTCGCCTTCCTCCTGAGTGACAGCATTCTCCTGGTGGCCACCTGGGTGACTCATAGCTCCTGGCTGCCCAGCGGGATTCCACTGCAGCTGTGGCTGCCTGTGGGATGCGGCTGCTTCTTTCTGGGCCTGGCTCTGCGGCTTGTGTACTACCACTGGCTGCACCCTAGCTGCTGCTGGAAGCCCGACCCTGACCAGGTAGACGGGGCCCGGAGTCTGCTTTCTCCAGAGGGGTATCAGCTGCCTCAGAACAGGCGCATGACCCATTTAGCACAGAAGTTTTTCCCCAAGGCTAAGGATGAGGCTGCTTCGCCAGTGAAGGGATAGGTGAACGGCGTCCTTTGAAGCAGGATCAGACCCAGCCAGCAGAGATGGAGAGTGACTCTGTTGGCAGAAGGCAGGCGAGGATAAGCTAACGATGCTGCTGTGGCCTCTATGCACTCAGCAAGAGCGGGACGCCTGTGCTGGGCCGGGCACCAGGGATGGTGCTGAGTCGGGCAGAGGCCTCCTTTCAAGGAGTTCACAGTGAACAAGATGAGAAGGGCTGGGCCCTGGAGGGTCAAGAGCCCCAATTATGTACAAGACACTTTGGGAGGAAAGAAGACTACCTTTTCCCCCTGCCATTGGTATAGCTGGTGCCCCAAAACTTCCACCTCCCTCCCTGGCTACCTCTAAAATGACTGGTATAGGTGCTGCCCCACCCCTTAGCTCCCCTATCCTGGGCTAGGAGGCCACAGGGGCTGTCCTCTAGAATTCTTCCTTCCCTCCCCCACACCATTCATTCAATTCATGAAACAAATCTTTGCCAAGAGCAGTTTATGTGCCAGGAACATCATTCTGTCCTTGCAACCTGGAACAAGACCAGCTACCAGCCTAGCTTCATCCGCTACTTGCACCAACCAGTCCCGGGTTAGATCCCAAATGCTAGAAGCCAGGGATGCCCAACTCTGGGTGGCCCCAGTCAGAACCTCTGGGATCTCAGTGAAGCTGGCCTGGCCTCTGCTCCTGCTCTCAAGGGGCTGCTTTTCAACCAAGAGCCTTGTGAGCCTGGTCTGAGCCTTGCACAGCCACTGAGTATTTTTTTTGCCTTAGCCAGTGTACCTCCTACCTCAGTCTATGTGAGAGGAAGAGAATGTGTGTGCCTGTGGGTCTCTACAAGTGACAGATGTGTTGTTTTCAACAGTATTATTAGGTTATGAATAAAGCCTCATGAAATCCTCCAA".upper())

    # @unittest.skip
    def test_get_exons(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        transcript = Transcript(XKR8_uid) 
        exons = transcript.get_exons()
        exon_seq = transcript.get_seq_from_pos(exons)
        self.assertEqual(exon_seq, "ATTCCCTTCCGTATGGAAATGAGGTTAACTCATTTGCAGGAACCTAACGCCCGCCCTCCCCCGACTCGGATCGCTGGCGTGAACCCAGCGGCCCCGTGCTCTCCGGGTATCCCTGGATCGAGGCGCACGCGTTGTTGCAAAGTCTCGCACTTAGGGATTAGAATGTGCCTTTGCGTTTCGTTTTGTTTTGCAACAATACAGGTGTGAGGGATCGCAGCCCTGGTCCAGGCTCTAGTCTCCCCGCCCTCTCGCTTTCTTGGGCCTCCGGGCGCCTCAAAGGTAAAACTAGGCCATTTGAAGCCTGCGAAGCGAAGGGCAGTCGGTCTTCAGGCCTAGCGGGCTTGGCTGGGCTGGGTCGGTGGACCCCTGGGCTGGCGGCGGGAGCAGAGCATCGAGCGGCTTTTAGCTGGGGTTCGGGCGGAGGACCTGGGACAACCGCGGGCCTCGCTCCTCCCCGGACGGGGCGGGACGGGGAAGTCCCGCCCACCAGGCCCAGGCCCCGGGCCGCCCCGAGGGCTGCGCCCACCTCCTTCCTGCCTCGGCAACCCCGGGCCCTGAGGGCAGGCCCCAACCGCGGAGGAGCAGGAGAGGGCGGAGGCCGGCGGGCCATGCCCTGGTCGTCCCGCGGCGCCCTCCTTCGGGACCTGGTCCTGGGCGTGCTGGGCACCGCCGCCTTCCTGCTCGACCTGGGCACCGACCTGTGGGCCGCCGTCCAGTATGCGCTCGGCGGCCGCTACCTGTGGGCGGCGCTGGTGCTGGCGCTGCTGGGCCTGGCCTCCGTGGCGCTGCAGCTCTTCAGCTGGCTCTGGCTGCGCGCTGACCCTGCCGGCCTGCACGGGTCGCAGCCCCCGCGCCGCTGCCTGGCGCTGCTGCATCTCCTGCAGCTGGGTTACCTGTACAGGTGCGTGCAGGAGCTGCGGCAGGGGCTGCTGGTGTGGCAGCAGGAGGAGCCCTCTGAGTTTGACTTGGCCTACGCCGACTTCCTCGCCCTGGACATCAGCATGCTGCGGCTCTTCGAGACCTTCTTGGAGACGGCACCACAGCTCACGCTGGTGCTGGCCATCATGCTGCAGAGTGGCCGGGCTGAGTACTACCAGTGGGTTGGCATCTGCACATCCTTCCTGGGCATCTCGTGGGCACTGCTCGACTACCACCGGGCCTTGCGCACCTGCCTCCCCTCCAAGCCGCTCCTGGGCCTGGGCTCCTCCGTGATCTACTTCCTGTGGAACCTGCTGCTGCTGTGGCCCCGAGTCCTGGCTGTGGCCCTGTTCTCAGCCCTCTTCCCCAGCTATGTGGCCCTGCACTTCCTGGGCCTGTGGCTGGTACTGCTGCTCTGGGTCTGGCTTCAGGGCACAGACTTCATGCCGGACCCCAGCTCCGAGTGGCTGTACCGGGTGACGGTGGCCACCATCCTCTATTTCTCCTGGTTCAACGTGGCTGAGGGCCGCACCCGAGGCCGGGCCATCATCCACTTCGCCTTCCTCCTGAGTGACAGCATTCTCCTGGTGGCCACCTGGGTGACTCATAGCTCCTGGCTGCCCAGCGGGATTCCACTGCAGCTGTGGCTGCCTGTGGGATGCGGCTGCTTCTTTCTGGGCCTGGCTCTGCGGCTTGTGTACTACCACTGGCTGCACCCTAGCTGCTGCTGGAAGCCCGACCCTGACCAGGTAGACGGGGCCCGGAGTCTGCTTTCTCCAGAGGGGTATCAGCTGCCTCAGAACAGGCGCATGACCCATTTAGCACAGAAGTTTTTCCCCAAGGCTAAGGATGAGGCTGCTTCGCCAGTGAAGGGATAGGTGAACGGCGTCCTTTGAAGCAGGATCAGACCCAGCCAGCAGAGATGGAGAGTGACTCTGTTGGCAGAAGGCAGGCGAGGATAAGCTAACGATGCTGCTGTGGCCTCTATGCACTCAGCAAGAGCGGGACGCCTGTGCTGGGCCGGGCACCAGGGATGGTGCTGAGTCGGGCAGAGGCCTCCTTTCAAGGAGTTCACAGTGAACAAGATGAGAAGGGCTGGGCCCTGGAGGGTCAAGAGCCCCAATTATGTACAAGACACTTTGGGAGGAAAGAAGACTACCTTTTCCCCCTGCCATTGGTATAGCTGGTGCCCCAAAACTTCCACCTCCCTCCCTGGCTACCTCTAAAATGACTGGTATAGGTGCTGCCCCACCCCTTAGCTCCCCTATCCTGGGCTAGGAGGCCACAGGGGCTGTCCTCTAGAATTCTTCCTTCCCTCCCCCACACCATTCATTCAATTCATGAAACAAATCTTTGCCAAGAGCAGTTTATGTGCCAGGAACATCATTCTGTCCTTGCAACCTGGAACAAGACCAGCTACCAGCCTAGCTTCATCCGCTACTTGCACCAACCAGTCCCGGGTTAGATCCCAAATGCTAGAAGCCAGGGATGCCCAACTCTGGGTGGCCCCAGTCAGAACCTCTGGGATCTCAGTGAAGCTGGCCTGGCCTCTGCTCCTGCTCTCAAGGGGCTGCTTTTCAACCAAGAGCCTTGTGAGCCTGGTCTGAGCCTTGCACAGCCACTGAGTATTTTTTTTGCCTTAGCCAGTGTACCTCCTACCTCAGTCTATGTGAGAGGAAGAGAATGTGTGTGCCTGTGGGTCTCTACAAGTGACAGATGTGTTGTTTTCAACAGTATTATTAGGTTATGAATAAAGCCTCATGAAATCCTCCAA")
    
    # @unittest.skip
    def test_get_coding_exons(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        transcript = Transcript(XKR8_uid) 
        exons = transcript.get_coding()
        exon_seq = transcript.get_seq_from_pos(exons)
        self.assertEqual(exon_seq, "ATGCCCTGGTCGTCCCGCGGCGCCCTCCTTCGGGACCTGGTCCTGGGCGTGCTGGGCACCGCCGCCTTCCTGCTCGACCTGGGCACCGACCTGTGGGCCGCCGTCCAGTATGCGCTCGGCGGCCGCTACCTGTGGGCGGCGCTGGTGCTGGCGCTGCTGGGCCTGGCCTCCGTGGCGCTGCAGCTCTTCAGCTGGCTCTGGCTGCGCGCTGACCCTGCCGGCCTGCACGGGTCGCAGCCCCCGCGCCGCTGCCTGGCGCTGCTGCATCTCCTGCAGCTGGGTTACCTGTACAGGTGCGTGCAGGAGCTGCGGCAGGGGCTGCTGGTGTGGCAGCAGGAGGAGCCCTCTGAGTTTGACTTGGCCTACGCCGACTTCCTCGCCCTGGACATCAGCATGCTGCGGCTCTTCGAGACCTTCTTGGAGACGGCACCACAGCTCACGCTGGTGCTGGCCATCATGCTGCAGAGTGGCCGGGCTGAGTACTACCAGTGGGTTGGCATCTGCACATCCTTCCTGGGCATCTCGTGGGCACTGCTCGACTACCACCGGGCCTTGCGCACCTGCCTCCCCTCCAAGCCGCTCCTGGGCCTGGGCTCCTCCGTGATCTACTTCCTGTGGAACCTGCTGCTGCTGTGGCCCCGAGTCCTGGCTGTGGCCCTGTTCTCAGCCCTCTTCCCCAGCTATGTGGCCCTGCACTTCCTGGGCCTGTGGCTGGTACTGCTGCTCTGGGTCTGGCTTCAGGGCACAGACTTCATGCCGGACCCCAGCTCCGAGTGGCTGTACCGGGTGACGGTGGCCACCATCCTCTATTTCTCCTGGTTCAACGTGGCTGAGGGCCGCACCCGAGGCCGGGCCATCATCCACTTCGCCTTCCTCCTGAGTGACAGCATTCTCCTGGTGGCCACCTGGGTGACTCATAGCTCCTGGCTGCCCAGCGGGATTCCACTGCAGCTGTGGCTGCCTGTGGGATGCGGCTGCTTCTTTCTGGGCCTGGCTCTGCGGCTTGTGTACTACCACTGGCTGCACCCTAGCTGCTGCTGGAAGCCCGACCCTGACCAGGTAGACGGGGCCCGGAGTCTGCTTTCTCCAGAGGGGTATCAGCTGCCTCAGAACAGGCGCATGACCCATTTAGCACAGAAGTTTTTCCCCAAGGCTAAGGATGAGGCTGCTTCGCCAGTGAAGGGATAG")
    
    # @unittest.skip
    def test_noncoding_gene(self):
        session = establish_GUD_session()
        PRDM15_uid = Gene().select_by_name(session, "PRDM15", True)[0].qualifiers["uid"]
        transcript = Transcript(PRDM15_uid) 
        # transcript = Transcript(87)  # PRDM15
        exons = transcript.get_coding()
        exon_seq = transcript.get_seq_from_pos(exons)
        self.assertEqual(exon_seq, "")
    
    # @unittest.skip
    def test_get_introns(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        transcript = Transcript(XKR8_uid) 
        introns = transcript.get_introns()
        intron_seq = transcript.get_seq_from_pos(introns)
        self.assertEqual(intron_seq, "GTGAGTGCTTCGCCCCGGGAGGGGAGGAGTGTCGGAGCCCAGCACCTCCGTCAGCTGGGTCACCTGTACAGGTGACACGCCATATGCCGGGAAGGGGACTGGGAGAGGGAACCAAGTCCTGTGGGCGCCTGGCCTACAGGTGAGCGTGCAGCCCTTTACGGAAAGGGAATCCCGGTAGACTGCCTTCATTCTAGCCCTAGCTTTCCTGGCACAGGCGAAGAAACTGAGGCCCAGGGAAGAAAGGGAGGCGCATGGGCTTTGAAGTCGGACCTCTCAGGGATCCACTTCTGGCTTTGCCCCCTCTCGCCTCACTTCTGCATTTCTCTGAGCCTCAGTTTCCTCCTGCGTAGAAAGGAGGTAGTCACCCTGAGACAGGTGTGACGGGCAGGCCTGTTGTGAAGAGTGAGCGAAAGAATGAGAAAGTGCCTCGCACAGTGCCTGGCCTGTAATGGCAGGGGCTGCGGACTCAGTTCAGCATCCCATGTTTCAGCATGGGCAGGGCCTTGGGAAGTCACTGACCTCTCAGTGGGGCTGTTTGGTTGCTGTTCCCATTGGGATGGGGATAGCGCCTGCCCGTTTGGTGAAGATGCAGTGAAATGACATCTGTCCACTGCCCTGGCTCAGAGTGAGCACTCAGCAACCTCAGCTGGCTTCTTGACCTGGGCCTCCCTGGGAGTTTCAGCAGCCCTGACCCCACCACAGCGCTTGCCCCTCACAAAGGCCGCCTCTCACCCTGTCTGCCTGGTTGTATTCTTCCCCCTGAAACTTGGCTTCCCACCCCAGACCCAGCAAGAGGGCAGAGATGGCCTCTGACTCATCCATGCCCATGGAGCCAGCCAGGGCTGGGCATAGGCTGGGTCCTGGAAAATGTGTGTGGATTCTGCTCCTTTTTGGACCTGGTGGAGCCTCGTAGAGATGGGAAAACAAACCCAAGGCTCAGAGGCATGCGACAAAGTCAGGGCAGAGGGTGGTGTGGGTTGGGATGGGGTGGCCAGGGCCAGGATCTGCTCTTGAATCCGTTTTTACAAACTCTTGAGATCTGGCCTTGACAAAGCCACACGGAGTCTCCAGGAGTGGAAGAGAGGAGCTTTGAATGTGGCAGTTTTGCCTGAGGGATTATAGAGACATCAGAAAACCCCGGGTGGGCATGAAGGGGTGCAGTTGTTAAGTCCTGGGCAGGCCTCCATGAGCCGTGAATCTGTAACTACCTTATGCATCTTTGTGGCCAATATTTCTGCTGAGCTTGAGTCAGACAGACTGTACTAGCTTTGGCTTTGGAAATGGGTCTCTGTTCCTGCCTGTGAATTGGCCGAGGCAGGGGTCCCTGCTAGGTCACTGGGGACCATAGGCAAAGGCTCCTGCTGAGGGAGAACCCCAGCCTGTCCTGCCTGCCTGCTCCTCAGTGTGTTCTTGTGTCCTTCCAGGGGAAGTGACAGTACATGTCTGGTGAATGAGCTTGTGATGAGTGAACGGGGTTCTCTCCCAATAGGCAACTGAGAGCAAAGTTCTGGGTGGAGGGTCCTTGGTGCATCCTCCACTTACTCTTCATGCCAGTGGGTACCCCAGACCTGTCTGTCCAAACTCTGGACTCTCTTAACTCCGCCCCAATCTCCATCCTTAACCACTCAGGGCCAGCCTCTTAAATGGGATCCCTCCTTCCAATCTAACCCTCCTCCAGCCCCTCCCCTGTGTGGCCGGGGCAAGGCAGAGTCTGATTCCATCTGGCCTGTGCCCAGAAGTGCCCAAGAGGCAAATGTCCTCTTGCCCACAGGACCCCAGGAGATCTTGGGCACACTAAAGTTTGAGAACTACTGCCTCAGGCAACTTTATAGCATGCCTTTCCAATTCAGGTTTGGATCCAAATCCTCATTCCAGTACTTATTAGCTGCTTATAATTTTTTGTTTGTTTTTTAAAAAGAGGTAGGGTCTGGTCAGGCTTGGTGGCTCATGCCTGTAATCCTAGCAGTCTGGGAGGCTGACGTGGGTGGATCACTTGAGGTCAGGAGTTTGAGACCAGCCTGCTGAACATGGCAAAAGCTCATCTCTACAAAAATTAGCCAGGTGTGGTGGCGCATGCCTGTAATCCCAGCATCCCAGCTACTCTGGAGGCCGAGGCAGGAGAATCGCTTGAACCTGGGAGGTGGAGGTTGCAGTGAGCCGAGTTTGTGCCACTGCACTCTAGCCTGGGCGACAAGCGACAGATGTAGACTCTGTCTCCAAAAAAAAAGAAAAAAAAAAAGAGAGAGAGAGGCAGGGTCTCTGTTGCCTGGGCTGGAGTGCAGTGGCACAATCAATCATGGCTCACAGTGGCCTTGAACTCCTGGGCTCAAGCTGTCCTCCTGCGTCAGCCTCCTGAGTAGCTTGGACTACAGGCTTGTACCACCACGTCCAACTAATTAAAAAAAATTCTTTGTAGAGATGGGGCTTGCTGTGTTGCCCAGGGTGGTCTCAAACTCCTGGCCTCCAGTGATCCTCTTGCCTTGGCCTGTCAAAATGTTGGGATTACAGGCGCGAGCCACTGCACCCAGACCTTATTAGCTTCTTGATCCTGTTTCCCCATCTGTAAAATGGGCTTTTGTGAGAAGTAAACAGGACAAGGTTTGTGATGAGCTTGGGACAGTGCTTAGCCAGCGGGAGTAGAAGGTGTATTGATCCCCATTTTTGCTTTTTTGTTTTTTTTGAGACGGAGTCTTGTTCTGTCGCCAGGCTGGAGTGCAGTGGCACGATCTCGGCTCACTGTAACCTCCGCCTTGCAGATTCAAGAGATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGGACTACAGGCGCGCACCACCACACCCAGCTAATTTTTTGTATTAGTAGAGACGAGGCTTCACCATGTTAGCCAGGATGGTCTCAATCTCCTGAACTCGTGATCAGCCCGCCTCAGACTCCCAAAGTGCTGGGATTACAGGCATGAGCCACCACACCCGGCCTCGATCCTCATTTTACAGATGAAACAAGTTCAGTGAGGTTAGGACATTGCCGAAGGCCCCATAGCATGGATGTGAGGAGACAGGTTGGAGCCTGTGTCCACTCATTAGATGGGTGGGAGGCTGAGGAATTCACAGGACACTAACCTGGCCCTCTGGGCATTTGTGTGTGGTGCCTAGGTGAGTGAAGGCCTGTGGCTGGCCCCCCTGTCGTGGCTTGGTGGGGGGTCTCTCAAATGTTGGAACTGTTTTTAGTCTTTTATAAAGGCTGCTTAGAAAACAGGAGAACAGGCTTTAGTCAGGCAGATCTGGCTTGAAACCTAAAGTCACTCTACAGCTGTTTGAGTTTGGACAAATGCCTTGACCTCTCTGAGTATGTTTGTTCTCATCTGAAATATGGGCTTAAATCCTCCTGCCTCATAAGGTTGATGAAAGGATTAAATGAGGTGATGCAAAGAAAGCCCATTTCCTGGTACATAAGTTCCTGGTACAGAGTCTCACTCTGTCATCGCCCGTAGTGGAGTACAGCAGCCTGATCATGGCTCACTGTAGCCTCCACCTCCCAGGCTCAAGTGATCCTCCTGTCTCAGCCTCCTGAGTAGCTGGGACTACAAGTGTGTATCACCATGCTGGCTAATTTTTCTTTCTTTTTTTTTTTTTTTTTTTTGTAGAGACGAGGTCCCACTTTGTTACCCAGGCTGGTCTTGAACTCCTGAGCTCAAGTAACCTCCTACCTCAGCCTCCTAAGGTGCTGGGATTACAGGTGTCGCCCACTGTGCCTGGCCCACAAGTCTTAATTGTAATTTTTATAATTTTGAAGATAATGAAGTGTGTAAGGTGCCTGATACAGCATAGGTAACTTTTTAGTTAAGAAACAATTTCATACGTTGGGAGGCCAAGGTGCACAGGTCGCTTGAGGCCAGAGTTGGAGACCATCCTGGGTAACATAGTGAGACCTCATCTCTTCAAAATTTTAAAAGAGAAACAAGAAACAATATATTGAATGCCTTCATCCAGTCAGGTTTTCATTGTGCATCTCTTCTGTGCCTGTTACTGTGCTGGGGACACAGCAGTGAACAAGATGAACCCAGCCCCTGCCCTGCCAGGATGATAGACTAAAACAAGTAGCTACGGTTGAGTGACTGGAAAAGGGAGAGGCAGGGAGCAGAGGATCACAGGGCCCCCTAAGCATGGGTGAAGTTTACAGTGAGGAGCTTTGGGAGGGTTTTTGCATGAAAGGAAAGTGACTTGCCCATTTCCACAGACCTGGACAGTGGCCAAGCTAAAGAGGGCCCCCACTCACATCCGACTCAGGGTCCAAGCCTTCCCCTTTGCCTTCCTCCACCGCTGCCATAAATGCCACAGCCTCTCAAGAAACCAGTCCTCACTCTACCGTCACTCGCTGTGTGACCTGGAGAGCCTTCCTGTGGAAGATGGAGGTTGGACTCGATCTCCAAGGGCCCTTTCGTCTTGCTAGTCTGAGTCTATATATTGATTGAAAAAACAATAATAGCGGCTGTCACAATCGAGTGCCAGCTATTAGCCAGGCCCTGTGGGAAGCACTTACAGTCATCATTGCTCATGTTCACAGCAGCCCTGTAGGTTTGTGCTATATTGATCTTCATTTTTAAAGAGGTGCAGAAAGGTGAGTGACTTGCCCTGGGTTACTGGGCACTCACTGGGCACACGTCTTTGTCTGTTGAGGGTTGGGGGTGTCTAGAACCAGGGCCAAGTGCAGACAGTCTGCACTGTGAGTGTGGCAGGGGGTAAGGGGGCGAGACAGATTTTCCCTACTTTTTATTTAGCAAACATCTCTTTCGCTGCTGTTATGTGCCAGGTACTGGGCTGCTGGGGGATCCCAAGTGAGCAGAGTCTGTTTTCTACCCTCGAGGAGCCCAGAGATAAGGAAATAGATAATTACTGTGTGATGAGACTCCAGACAGAGGTGGGTGGCATGTTACAGGGATACCTGACACAGCTGAGTGGGTGGCATGGGGTCAGGGTGGGTGACTCCCGGGGCTCTTCAAGCTGGGGCCTGCGGGGTAATGGAGGAGTAGGCCGGGGAAGTGGGGCCTGTGCTTCTGGCGACCTAACATCCTGGGCAGAGCTTGTCAAGGTCACGGAAGGTGGCATGCTGGGCAAACTGGAAGAACATCAGCCCTGCTGAGACCTGGGCAAGGCTAATGAGCACAGATCTGTTTCCAGGCTAGGAGTGGGTTCTGGGCGCCTAATAGGTTCCCAGTAAACATCTGTCGAATGACTGCGGTGGACGGGGACAGGGGAGGAAGCAGTCGGGAGACGTGCCGGTGCCACTTCCATCCCTCCCTGGAGGCCCTTGTGCTTCTGCTCCAGGATTGGCAACCAGGAGGTGGGATAGGACCCCTGTTGTAAACTTCTGGATCTTGGAAAATCAAGGTTAGGGGTCAGTCCGATGGCCTCTGGTCTTGGAGGGGAGGGGAGGGGAGTGGGGAGACCTTCTGTCCACACAGCAGGGACATCTCTCCTGGCCCTGAGGGCAGCTTTAGCCAGAGCCTGTTGCCACCCCATGGGATTTTCTACTCCCTTTTTGAGACTAAGAAAGACGGAACTGAGACTGTTGATTTTTAGACACAAGGAAGGCTTGTGTTCTTCCCAGAAAGAAAGGGTTATGGGGCCCTGGAAGATGCCCAGGATGCAGCCAAGGCCCAGGGGTGCTGAGTGCTGGGTGGGCCACAGGTCACATCCTCTCATCTTTGACAAATACCACCCGGATAGCACCTACGCAGCAAAGCGCTGTGGTGAGGGGCAGGCTCTATATTAGGAGTCATAGCTTTGTTTTTGGTTGTGGGAACTCACTGGGTCTTCTCTAGCTGCAGATTTGCCTTCAACAAACGAGGGATTCTAATACCTACCCCAGGGTTGCTGGGAGGGCCCCCACGGTACCTGTGACCGCTGGGGAGTGCCAAGCAGGCTGGCCCCAGGACTCACTGTTCCCTCCTACTCTTTGCAG".upper())
    
    # @unittest.skip
    def test_get_utrs_positive_strand(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        transcript = Transcript(XKR8_uid) 
        both_utr = transcript.get_utr("both")
        both_utr = transcript.get_seq_from_pos(both_utr)
        self.assertEqual(both_utr, "ATTCCCTTCCGTATGGAAATGAGGTTAACTCATTTGCAGGAACCTAACGCCCGCCCTCCCCCGACTCGGATCGCTGGCGTGAACCCAGCGGCCCCGTGCTCTCCGGGTATCCCTGGATCGAGGCGCACGCGTTGTTGCAAAGTCTCGCACTTAGGGATTAGAATGTGCCTTTGCGTTTCGTTTTGTTTTGCAACAATACAGGTGTGAGGGATCGCAGCCCTGGTCCAGGCTCTAGTCTCCCCGCCCTCTCGCTTTCTTGGGCCTCCGGGCGCCTCAAAGGTAAAACTAGGCCATTTGAAGCCTGCGAAGCGAAGGGCAGTCGGTCTTCAGGCCTAGCGGGCTTGGCTGGGCTGGGTCGGTGGACCCCTGGGCTGGCGGCGGGAGCAGAGCATCGAGCGGCTTTTAGCTGGGGTTCGGGCGGAGGACCTGGGACAACCGCGGGCCTCGCTCCTCCCCGGACGGGGCGGGACGGGGAAGTCCCGCCCACCAGGCCCAGGCCCCGGGCCGCCCCGAGGGCTGCGCCCACCTCCTTCCTGCCTCGGCAACCCCGGGCCCTGAGGGCAGGCCCCAACCGCGGAGGAGCAGGAGAGGGCGGAGGCCGGCGGGCCGTGAACGGCGTCCTTTGAAGCAGGATCAGACCCAGCCAGCAGAGATGGAGAGTGACTCTGTTGGCAGAAGGCAGGCGAGGATAAGCTAACGATGCTGCTGTGGCCTCTATGCACTCAGCAAGAGCGGGACGCCTGTGCTGGGCCGGGCACCAGGGATGGTGCTGAGTCGGGCAGAGGCCTCCTTTCAAGGAGTTCACAGTGAACAAGATGAGAAGGGCTGGGCCCTGGAGGGTCAAGAGCCCCAATTATGTACAAGACACTTTGGGAGGAAAGAAGACTACCTTTTCCCCCTGCCATTGGTATAGCTGGTGCCCCAAAACTTCCACCTCCCTCCCTGGCTACCTCTAAAATGACTGGTATAGGTGCTGCCCCACCCCTTAGCTCCCCTATCCTGGGCTAGGAGGCCACAGGGGCTGTCCTCTAGAATTCTTCCTTCCCTCCCCCACACCATTCATTCAATTCATGAAACAAATCTTTGCCAAGAGCAGTTTATGTGCCAGGAACATCATTCTGTCCTTGCAACCTGGAACAAGACCAGCTACCAGCCTAGCTTCATCCGCTACTTGCACCAACCAGTCCCGGGTTAGATCCCAAATGCTAGAAGCCAGGGATGCCCAACTCTGGGTGGCCCCAGTCAGAACCTCTGGGATCTCAGTGAAGCTGGCCTGGCCTCTGCTCCTGCTCTCAAGGGGCTGCTTTTCAACCAAGAGCCTTGTGAGCCTGGTCTGAGCCTTGCACAGCCACTGAGTATTTTTTTTGCCTTAGCCAGTGTACCTCCTACCTCAGTCTATGTGAGAGGAAGAGAATGTGTGTGCCTGTGGGTCTCTACAAGTGACAGATGTGTTGTTTTCAACAGTATTATTAGGTTATGAATAAAGCCTCATGAAATCCTCCAA") 
        prime_5 = transcript.get_utr("5_prime")
        prime_5 = transcript.get_seq_from_pos(prime_5)
        self.assertEqual(prime_5,"ATTCCCTTCCGTATGGAAATGAGGTTAACTCATTTGCAGGAACCTAACGCCCGCCCTCCCCCGACTCGGATCGCTGGCGTGAACCCAGCGGCCCCGTGCTCTCCGGGTATCCCTGGATCGAGGCGCACGCGTTGTTGCAAAGTCTCGCACTTAGGGATTAGAATGTGCCTTTGCGTTTCGTTTTGTTTTGCAACAATACAGGTGTGAGGGATCGCAGCCCTGGTCCAGGCTCTAGTCTCCCCGCCCTCTCGCTTTCTTGGGCCTCCGGGCGCCTCAAAGGTAAAACTAGGCCATTTGAAGCCTGCGAAGCGAAGGGCAGTCGGTCTTCAGGCCTAGCGGGCTTGGCTGGGCTGGGTCGGTGGACCCCTGGGCTGGCGGCGGGAGCAGAGCATCGAGCGGCTTTTAGCTGGGGTTCGGGCGGAGGACCTGGGACAACCGCGGGCCTCGCTCCTCCCCGGACGGGGCGGGACGGGGAAGTCCCGCCCACCAGGCCCAGGCCCCGGGCCGCCCCGAGGGCTGCGCCCACCTCCTTCCTGCCTCGGCAACCCCGGGCCCTGAGGGCAGGCCCCAACCGCGGAGGAGCAGGAGAGGGCGGAGGCCGGCGGGCC") 
        prime_3 = transcript.get_utr("3_prime")
        prime_3 = transcript.get_seq_from_pos(prime_3)
        self.assertEqual(prime_3,"GTGAACGGCGTCCTTTGAAGCAGGATCAGACCCAGCCAGCAGAGATGGAGAGTGACTCTGTTGGCAGAAGGCAGGCGAGGATAAGCTAACGATGCTGCTGTGGCCTCTATGCACTCAGCAAGAGCGGGACGCCTGTGCTGGGCCGGGCACCAGGGATGGTGCTGAGTCGGGCAGAGGCCTCCTTTCAAGGAGTTCACAGTGAACAAGATGAGAAGGGCTGGGCCCTGGAGGGTCAAGAGCCCCAATTATGTACAAGACACTTTGGGAGGAAAGAAGACTACCTTTTCCCCCTGCCATTGGTATAGCTGGTGCCCCAAAACTTCCACCTCCCTCCCTGGCTACCTCTAAAATGACTGGTATAGGTGCTGCCCCACCCCTTAGCTCCCCTATCCTGGGCTAGGAGGCCACAGGGGCTGTCCTCTAGAATTCTTCCTTCCCTCCCCCACACCATTCATTCAATTCATGAAACAAATCTTTGCCAAGAGCAGTTTATGTGCCAGGAACATCATTCTGTCCTTGCAACCTGGAACAAGACCAGCTACCAGCCTAGCTTCATCCGCTACTTGCACCAACCAGTCCCGGGTTAGATCCCAAATGCTAGAAGCCAGGGATGCCCAACTCTGGGTGGCCCCAGTCAGAACCTCTGGGATCTCAGTGAAGCTGGCCTGGCCTCTGCTCCTGCTCTCAAGGGGCTGCTTTTCAACCAAGAGCCTTGTGAGCCTGGTCTGAGCCTTGCACAGCCACTGAGTATTTTTTTTGCCTTAGCCAGTGTACCTCCTACCTCAGTCTATGTGAGAGGAAGAGAATGTGTGTGCCTGTGGGTCTCTACAAGTGACAGATGTGTTGTTTTCAACAGTATTATTAGGTTATGAATAAAGCCTCATGAAATCCTCCAA") 

    # @unittest.skip
    def test_get_codon_positive_easy(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        XKR8 = Transcript(XKR8_uid) 
        codon = XKR8.get_codon_from_pos(28286580)
        self.assertEqual(codon[0], "ATG")
        self.assertEqual(codon[1], 0)
        self.assertEqual(codon[2], 1)

    # @unittest.skip  
    def test_get_codon_positive_medium(self):
        session = establish_GUD_session()
        XKR8_uid = Gene().select_by_name(session, "XKR8", True)[0].qualifiers["uid"]
        XKR8 = Transcript(XKR8_uid) 
        codon = XKR8.get_codon_from_pos(28293061)
        self.assertEqual(codon[0], "GAC")
        self.assertEqual(codon[1], 1)
        self.assertEqual(codon[2], 1)

    # @unittest.skip    
    def test_get_codon_negative_easy(self):
        session = establish_GUD_session()
        SOX18_uid = Gene().select_by_name(session, "SOX18", True)[0].qualifiers["uid"]
        sox18 = Transcript(SOX18_uid)

        codon = sox18.get_codon_from_pos(62680869)
        self.assertEqual(codon[0], "ATG")
        self.assertEqual(codon[1], 0)
        self.assertEqual(codon[2], -1)

    # @unittest.skip 
    def test_get_codon_negative_hard(self):
        session = establish_GUD_session()
        SOX18_uid = Gene().select_by_name(session, "SOX18", True)[0].qualifiers["uid"]
        sox18 = Transcript(SOX18_uid)

        # sox18 = Transcript(241) #SOX18
        codon = sox18.get_codon_from_pos(62680315)
        self.assertEqual(codon[0], "GGC")
        self.assertEqual(codon[1], 1)
        self.assertEqual(codon[2], -1)

    # @unittest.skip
    def test_get_exons_negative(self):
        session = establish_GUD_session()
        TOR1A_uid = Gene().select_by_name(session, "TOR1A", True)[0].qualifiers["uid"]
        transcript = Transcript(TOR1A_uid) 

        exons = transcript.get_exons()
        exon_seq = transcript.get_seq_from_pos(exons)
        self.assertEqual(exon_seq, "GCACCGGTTCGCGGTCGGCGCGAGAACAAGCAGGGTGGCGCGGGTCCGGGCATGAAGCTGGGCCGGGCCGTGCTGGGCCTGCTGCTGCTGGCGCCGTCCGTGGTGCAGGCGGTGGAGCCCATCAGCCTGGGACTGGCCCTGGCCGGCGTCCTCACCGGCTACATCTACCCGCGTCTCTACTGCCTCTTCGCCGAGTGCTGCGGGCAGAAGCGGAGCCTTAGCCGGGAGGCACTGCAGAAGGATCTGGACGACAACCTCTTTGGACAGCATCTTGCAAAGAAAATCATCTTAAATGCCGTGTTTGGTTTCATAAACAACCCAAAGCCCAAGAAACCTCTCACGCTCTCCCTGCACGGGTGGACAGGCACCGGCAAAAATTTCGTCAGCAAGATCATCGCAGAGAATATTTACGAGGGTGGTCTGAACAGTGACTATGTCCACCTGTTTGTGGCCACATTGCACTTTCCACATGCTTCAAACATCACCTTGTACAAGGATCAGTTACAGTTGTGGATTCGAGGCAACGTGAGTGCCTGTGCGAGGTCCATCTTCATATTTGATGAAATGGATAAGATGCATGCAGGCCTCATAGATGCCATCAAGCCTTTCCTCGACTATTATGACCTGGTGGATGGGGTCTCCTACCAGAAAGCCATGTTCATATTTCTCAGCAATGCTGGAGCAGAAAGGATCACAGATGTGGCTTTGGATTTCTGGAGGAGTGGAAAGCAGAGGGAAGACATCAAGCTCAAAGACATTGAACACGCGTTGTCTGTGTCGGTTTTCAATAACAAGAACAGTGGCTTCTGGCACAGCAGCTTAATTGACCGGAACCTCATTGATTATTTTGTTCCCTTCCTCCCCCTGGAATACAAACACCTAAAAATGTGTATCCGAGTGGAAATGCAGTCCCGAGGCTATGAAATTGATGAAGACATTGTAAGCAGAGTGGCTGAGGAGATGACATTTTTCCCCAAAGAGGAGAGAGTTTTCTCAGATAAAGGCTGCAAAACGGTGTTCACCAAGTTAGATTATTACTACGATGATTGACAGTCATGATTGGCAGCCGGAGTCACTGCCTGGAGTTGGAAAAGAAACAACACTCAGTCCTTCCACACTTCCACCCCCAGCTCCTTTCCCTGGAAGAGGAATCCAGTGAATGTTCCTGTTTGATGTGACAGGAATTCTCCCTGGCATTGTTTCCACCCCCTGGTGCCTGCAGGCCACCCAGGGACCACGGGCGAGGACGTGAAGCCTCCCGAACACGCACAGAAGGAAGGAGCCAGCTCCCAGCCCACTCATCGCAGGGCTCATGATTTTTTACAAATTATGTTTTAATTCCAAGTGTTTCTGTTTCAAGGAAGGATGAATAAGTTTTATTGAAAATGTGGTAACTTTATTTAAAATGATTTTTAACATTATGAGAGACTGCTCAGATTCTAAGTTGTTGGCCTTGTGTGTGTGTTTTTTTTTAAGTTCTCATCATTATTACATAGACTGTGATGTATCTTTACTGGAAATGAGCCCAAGCACACATGCATGGCATTTGTTCCACAGGAGGGCATCCCTGGGGATGTGGCTGGAGCATGAGCCAGCTCTGTCCCAGGATGGTCCCAGCGGATGCTGCCAGGGGCAGTGAAGTGTTTAGGTGAAGGACAAGTAGGTAAGAGGACGCCTTCAGGCACCACAGATAAGCCTGAAACAGCCTCTCCAAGGGTTTTCACCTTAGCAACAATGGGAGCTGTGGGAGTGATTTTGGCCACACTGTCAACATTTGTTAGAACCAGTCTTTTGAAAGAAAAGTATTTCCAACTTGTCACTTGCCAGTCACTCCGTTTTGCAAAAGGTGGCCCTTCACTGTCCATTCCAAATAGCCCACACGTGCTCTCTGCTGGATTCTAAATTATGTGAATTTTGCCATATTAAATCTTCCTCATTTATACTATTATTTGTTACGTTCAATCAGAATCCCCGAAACCTCCTATAAAGCTTAGCTGCCCCTTCTGAGGATGCTGAGAACGGTGTCTTTCTTTATAAATGCAAATGGCTACCGTTTTACAATAAAATTTTGCATGTGCCA")
                                    
    # @unittest.skip
    def test_get_coding_negative_exons(self):
        session = establish_GUD_session()
        TOR1A_uid = Gene().select_by_name(session, "TOR1A", True)[0].qualifiers["uid"]
        transcript = Transcript(TOR1A_uid) 

        exons = transcript.get_coding()
        exon_seq = transcript.get_seq_from_pos(exons)
        self.assertEqual(exon_seq, "ATGAAGCTGGGCCGGGCCGTGCTGGGCCTGCTGCTGCTGGCGCCGTCCGTGGTGCAGGCGGTGGAGCCCATCAGCCTGGGACTGGCCCTGGCCGGCGTCCTCACCGGCTACATCTACCCGCGTCTCTACTGCCTCTTCGCCGAGTGCTGCGGGCAGAAGCGGAGCCTTAGCCGGGAGGCACTGCAGAAGGATCTGGACGACAACCTCTTTGGACAGCATCTTGCAAAGAAAATCATCTTAAATGCCGTGTTTGGTTTCATAAACAACCCAAAGCCCAAGAAACCTCTCACGCTCTCCCTGCACGGGTGGACAGGCACCGGCAAAAATTTCGTCAGCAAGATCATCGCAGAGAATATTTACGAGGGTGGTCTGAACAGTGACTATGTCCACCTGTTTGTGGCCACATTGCACTTTCCACATGCTTCAAACATCACCTTGTACAAGGATCAGTTACAGTTGTGGATTCGAGGCAACGTGAGTGCCTGTGCGAGGTCCATCTTCATATTTGATGAAATGGATAAGATGCATGCAGGCCTCATAGATGCCATCAAGCCTTTCCTCGACTATTATGACCTGGTGGATGGGGTCTCCTACCAGAAAGCCATGTTCATATTTCTCAGCAATGCTGGAGCAGAAAGGATCACAGATGTGGCTTTGGATTTCTGGAGGAGTGGAAAGCAGAGGGAAGACATCAAGCTCAAAGACATTGAACACGCGTTGTCTGTGTCGGTTTTCAATAACAAGAACAGTGGCTTCTGGCACAGCAGCTTAATTGACCGGAACCTCATTGATTATTTTGTTCCCTTCCTCCCCCTGGAATACAAACACCTAAAAATGTGTATCCGAGTGGAAATGCAGTCCCGAGGCTATGAAATTGATGAAGACATTGTAAGCAGAGTGGCTGAGGAGATGACATTTTTCCCCAAAGAGGAGAGAGTTTTCTCAGATAAAGGCTGCAAAACGGTGTTCACCAAGTTAGATTATTACTACGATGATTGA")

    # @unittest.skip
    def test_get_utrs_negative_strand(self):
        session = establish_GUD_session()
        TOR1A_uid = Gene().select_by_name(session, "TOR1A", True)[0].qualifiers["uid"]
        transcript = Transcript(TOR1A_uid) 

        both_utr = transcript.get_utr("both")
        print(both_utr)
        both_utr = transcript.get_seq_from_pos(both_utr)
        self.assertEqual(both_utr, "GCACCGGTTCGCGGTCGGCGCGAGAACAAGCAGGGTGGCGCGGGTCCGGGCCAGTCATGATTGGCAGCCGGAGTCACTGCCTGGAGTTGGAAAAGAAACAACACTCAGTCCTTCCACACTTCCACCCCCAGCTCCTTTCCCTGGAAGAGGAATCCAGTGAATGTTCCTGTTTGATGTGACAGGAATTCTCCCTGGCATTGTTTCCACCCCCTGGTGCCTGCAGGCCACCCAGGGACCACGGGCGAGGACGTGAAGCCTCCCGAACACGCACAGAAGGAAGGAGCCAGCTCCCAGCCCACTCATCGCAGGGCTCATGATTTTTTACAAATTATGTTTTAATTCCAAGTGTTTCTGTTTCAAGGAAGGATGAATAAGTTTTATTGAAAATGTGGTAACTTTATTTAAAATGATTTTTAACATTATGAGAGACTGCTCAGATTCTAAGTTGTTGGCCTTGTGTGTGTGTTTTTTTTTAAGTTCTCATCATTATTACATAGACTGTGATGTATCTTTACTGGAAATGAGCCCAAGCACACATGCATGGCATTTGTTCCACAGGAGGGCATCCCTGGGGATGTGGCTGGAGCATGAGCCAGCTCTGTCCCAGGATGGTCCCAGCGGATGCTGCCAGGGGCAGTGAAGTGTTTAGGTGAAGGACAAGTAGGTAAGAGGACGCCTTCAGGCACCACAGATAAGCCTGAAACAGCCTCTCCAAGGGTTTTCACCTTAGCAACAATGGGAGCTGTGGGAGTGATTTTGGCCACACTGTCAACATTTGTTAGAACCAGTCTTTTGAAAGAAAAGTATTTCCAACTTGTCACTTGCCAGTCACTCCGTTTTGCAAAAGGTGGCCCTTCACTGTCCATTCCAAATAGCCCACACGTGCTCTCTGCTGGATTCTAAATTATGTGAATTTTGCCATATTAAATCTTCCTCATTTATACTATTATTTGTTACGTTCAATCAGAATCCCCGAAACCTCCTATAAAGCTTAGCTGCCCCTTCTGAGGATGCTGAGAACGGTGTCTTTCTTTATAAATGCAAATGGCTACCGTTTTACAATAAAATTTTGCATGTGCCA") 
        prime_5 = transcript.get_utr("5_prime")
        prime_5 = transcript.get_seq_from_pos(prime_5)
        self.assertEqual(prime_5,"GCACCGGTTCGCGGTCGGCGCGAGAACAAGCAGGGTGGCGCGGGTCCGGGC") 
        prime_3 = transcript.get_utr("3_prime")
        prime_3 = transcript.get_seq_from_pos(prime_3)
        self.assertEqual(prime_3,"CAGTCATGATTGGCAGCCGGAGTCACTGCCTGGAGTTGGAAAAGAAACAACACTCAGTCCTTCCACACTTCCACCCCCAGCTCCTTTCCCTGGAAGAGGAATCCAGTGAATGTTCCTGTTTGATGTGACAGGAATTCTCCCTGGCATTGTTTCCACCCCCTGGTGCCTGCAGGCCACCCAGGGACCACGGGCGAGGACGTGAAGCCTCCCGAACACGCACAGAAGGAAGGAGCCAGCTCCCAGCCCACTCATCGCAGGGCTCATGATTTTTTACAAATTATGTTTTAATTCCAAGTGTTTCTGTTTCAAGGAAGGATGAATAAGTTTTATTGAAAATGTGGTAACTTTATTTAAAATGATTTTTAACATTATGAGAGACTGCTCAGATTCTAAGTTGTTGGCCTTGTGTGTGTGTTTTTTTTTAAGTTCTCATCATTATTACATAGACTGTGATGTATCTTTACTGGAAATGAGCCCAAGCACACATGCATGGCATTTGTTCCACAGGAGGGCATCCCTGGGGATGTGGCTGGAGCATGAGCCAGCTCTGTCCCAGGATGGTCCCAGCGGATGCTGCCAGGGGCAGTGAAGTGTTTAGGTGAAGGACAAGTAGGTAAGAGGACGCCTTCAGGCACCACAGATAAGCCTGAAACAGCCTCTCCAAGGGTTTTCACCTTAGCAACAATGGGAGCTGTGGGAGTGATTTTGGCCACACTGTCAACATTTGTTAGAACCAGTCTTTTGAAAGAAAAGTATTTCCAACTTGTCACTTGCCAGTCACTCCGTTTTGCAAAAGGTGGCCCTTCACTGTCCATTCCAAATAGCCCACACGTGCTCTCTGCTGGATTCTAAATTATGTGAATTTTGCCATATTAAATCTTCCTCATTTATACTATTATTTGTTACGTTCAATCAGAATCCCCGAAACCTCCTATAAAGCTTAGCTGCCCCTTCTGAGGATGCTGAGAACGGTGTCTTTCTTTATAAATGCAAATGGCTACCGTTTTACAATAAAATTTTGCATGTGCCA") 
    
    # @unittest.skip 
    def test_get_sequence_stranded(self):
        session = establish_GUD_session()
        TOR1A_uid = Gene().select_by_name(session, "TOR1A", True)[0].qualifiers["uid"]
        TOR1A = Transcript(TOR1A_uid) 
        sequence_positive = TOR1A.get_seq()
        sequence_negative = TOR1A.get_seq(True)
        self.assertEqual(Seq(sequence_positive).reverse_complement(), sequence_negative)
    

if __name__ == '__main__':
    unittest.main()